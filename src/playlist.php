<?php

require_once('config.php');
require_once('file_handling.php');
require_once('Filesystem.php');

if (!isset($_GET['q']))
    die("No valid query given");

switch ($_GET['q']) {
    case 'create':
        assure_keys($_GET, array('root', 'name', 'path'), 'Could not create playlist: Invalid aguments given');
        create($_GET['root'], $_GET['path'], $_GET['name']);
        break;
    case 'delete':
        assure_keys($_GET, array('root', 'path'), 'Could not delete playlist: Invalid aguments given');
        delete($_GET['root'], $_GET['path']);
        break;
    case 'save':
        assure_keys($_GET, array('root', 'path'), 'Playlist could not be saved: Invalid aguments given');
        assure_keys($_POST, 'data', 'Playlist could not be saved: Invalid aguments given');
        save($_GET['root'], $_GET['path'], $_POST['data']);
        break;
    default:
        die("Unrecognized query $_GET[q]");
}

function assure_keys($array, $keys, $error_message = '') {
    if (!is_array($keys))
        $keys = array($keys);

    foreach ($keys as $key)
        if (!isset($array[$key]))
            die($error_message);
}

////////////////////////////////////////////////////////////////////////////////
//   QUERIES   /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function create($root, $path, $name) {
    $playlist_path = $path.DIRECTORY_SEPARATOR.$name;
    $playlist_file_info = pathinfo($playlist_path);

    $extension = isset($playlist_file_info['extension']) ? $playlist_file_info['extension'] : '';
    if (!in_array($extension, explode(',', PLAYLIST_FORMATS)))
        die('Could not create playlist: Invalid file extension');

    // Create file
    @touch($playlist_path)
        or die('Could not create playlist: Operation not permitted');

    // Add new file to session
    $playlists = unserialize($_SESSION[SESSION_PLAYLISTS]);
    $relative_path = make_relative_path($root, $playlist_path, false);
    $playlists->add($relative_path);
    $_SESSION[SESSION_PLAYLISTS] = serialize($playlists);

    echo 'Playlist created successfully';
}

function delete($root, $path) {
    $playlist_file_info = pathinfo($path);

    if (!is_file($path))
        die('Could not delete playlist: Not a file');

    $extension = isset($playlist_file_info['extension']) ? $playlist_file_info['extension'] : '';
    if (!in_array($extension, explode(',', PLAYLIST_FORMATS)))
        die('Could not delete playlist: Invalid file extension');

    // Delete file
    @unlink($path)
        or die('Could not delete playlist: Operation not permitted');

    // Remove file from session
    $playlists = unserialize($_SESSION[SESSION_PLAYLISTS]);
    $relative_path = make_relative_path($root, $path, false);
    $playlists->remove($relative_path);
    $_SESSION[SESSION_PLAYLISTS] = serialize($playlists);

    echo 'Playlist deleted successfully';
}

function save($root, $path, $data) {
    $playlist_file_info = get_file_info($path);

    // Reference: http://stackoverflow.com/questions/689185/json-decode-returns-null-php
    if (get_magic_quotes_gpc()) {
        // Remove PHP magic quotes 
        $data = stripslashes($data);
    }
    $data = json_decode($data, true);

    if ($data == null)
        die('Playlist could not be saved: Could not parse json data');

    $handle = @fopen($playlist_file_info['path'], 'w')
        or die('Playlist could not be saved: Could not open file for writing');

    fwrite($handle, playlist_header().LINE_BREAK);
    fwrite($handle, implode("\n", playlist_contents($playlist_file_info['path'], $data)));
    fclose($handle);

    echo 'Playlist saved successfully';
}

////////////////////////////////////////////////////////////////////////////////
//   HELPERS   /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function playlist_header() {
    return COMMENT_SYMBOL.'Generated by '.APPLICATION_NAME.' v'.APPLICATION_VERSION.', date '.date('Y-m-d (H:i)');
}

function playlist_contents($playlist_path, $data) {
    // Make data paths relative to playlist path, and skip directories
    $playlist_content = array();
    foreach ($data as $file) {
        if (file_exists($file) && !is_dir($file))
            array_push($playlist_content, make_relative_path($playlist_path, $file));
    }
    return $playlist_content;
}

?>